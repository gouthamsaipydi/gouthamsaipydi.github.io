<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://gouthamsaipydi.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://gouthamsaipydi.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-16T18:24:18+00:00</updated><id>https://gouthamsaipydi.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Stack and Queue Implementation</title><link href="https://gouthamsaipydi.github.io/blog/2025/Stack_and_Queue/" rel="alternate" type="text/html" title="Stack and Queue Implementation"/><published>2025-06-16T00:00:00+00:00</published><updated>2025-06-16T00:00:00+00:00</updated><id>https://gouthamsaipydi.github.io/blog/2025/Stack_and_Queue</id><content type="html" xml:base="https://gouthamsaipydi.github.io/blog/2025/Stack_and_Queue/"><![CDATA[<p>Here I plan to document the Stack and Queue Implementations in Python, these could be helpful to anyone preparing for the upcoming placement season.</p> <h2 id="stack">Stack</h2> <p>Simply put it’s a linear data structure(linear data container) which holds data with a few quirky twist: 1) Data can only be inserted from one end 2) Inserted data can be removed from that very en</p> <p>I know I made it a bit wordy, the famous 4 letter acronymn LIFO(Last-in First-out) principle nicely sums up the above jargon.</p> <p>Now Let’s implement it in Python to see its beauty.</p> <pre><code class="language-Python">class stack:
    def __init__(self,size):
        if size&lt;=0 or type(size)==float:
            raise ValueError('Stack size must be a positive integer')
        self.size=size
        self.top=-1
        self.arr=[]

    def push(self,x):
        if self.top&gt;=self.size-1:
            raise OverflowError('Stack is full')
        self.arr.append(x)
        self.top+=1
    
    def pop(self):
        if self.top==-1:
            raise IndexError('The Stack is empty, cannot pop')
        self.top-=1
        self.arr.pop()


    def peek(self):
        if self.top==-1:
            raise IndexError('The Stack is empty')
        return self.arr[self.top]

    def length(self):
        return self.top+1
</code></pre> <h3 id="the-important-methods-involved-with-stack-data-structure-are">The Important Methods involved with Stack Data Structure are</h3> <p>push, pop, peek and length.</p> <p>Push Method: As the word suggests, it pushes elements on to the stack from one end.</p> <ul> <li>Time Complexity involved is O(1)</li> </ul> <p>Pop Method: It pops the last element which was pushed onto the stack(LIFO is the Magic Mantra)</p> <ul> <li>Time Complexity involved is O(1)</li> </ul> <p>Peek Method: This method enables us to take a quick peek at the stack.</p> <ul> <li>Time Complexity involed is O(1)</li> </ul> <p>Length Method: This method enables us to get the size of the stack.</p> <h2 id="queue">Queue</h2> <p>It’s also a linear data structure which holds data in the following way: 1) Data can only be inserted from one end 2) Inserted data can be removed from the opposite end</p> <p>The 4 letter acronymn which can come in handy is FIFO(First-in First-out)</p> <p>Now Let’s implement it in Python to better understand this data structure:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Queue</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span><span class="n">size</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="o">=</span><span class="n">size</span>
        <span class="n">self</span><span class="p">.</span><span class="n">arr</span><span class="o">=</span><span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="n">size</span>
        <span class="n">self</span><span class="p">.</span><span class="n">current_size</span><span class="o">=</span><span class="mi">0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">start</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">end</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>

    <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="n">self</span><span class="p">,</span><span class="n">x</span><span class="p">):</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">current_size</span><span class="o">==</span><span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">):</span>
            <span class="k">raise</span> <span class="nc">OverflowError</span><span class="p">(</span><span class="sh">"</span><span class="s">Queue is full</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">current_size</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">start</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">end</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">end</span><span class="o">=</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">end</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">self</span><span class="p">.</span><span class="n">size</span>
        <span class="n">self</span><span class="p">.</span><span class="n">arr</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">end</span><span class="p">]</span><span class="o">=</span><span class="n">x</span>
        <span class="n">self</span><span class="p">.</span><span class="n">current_size</span><span class="o">+=</span><span class="mi">1</span>
    
    <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">current_size</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">IndexError</span><span class="p">(</span><span class="sh">"</span><span class="s">Queue is empty</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">a</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">arr</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">start</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">current_size</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">start</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">end</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">start</span><span class="o">=</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">start</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">self</span><span class="p">.</span><span class="n">size</span>
        <span class="n">self</span><span class="p">.</span><span class="n">current_size</span><span class="o">-=</span><span class="mi">1</span>
        <span class="k">return</span> <span class="n">a</span>

    <span class="k">def</span> <span class="nf">peek</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">current_size</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="nc">IndexError</span><span class="p">(</span><span class="sh">"</span><span class="s">Queue is Empty</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">arr</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">start</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">length</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">current_size</span>
</code></pre></div></div> <h3 id="the-important-methods-involved-with-queue-data-structure-are">The Important Methods involved with Queue Data Structure are</h3> <p>push, pop, peek and length.</p> <p>Push Method: It pushes elements on to the queue from one end.</p> <ul> <li>Time Complexity involved is O(1)</li> </ul> <p>Pop Method: It pops the last element which was pushed first onto the queue</p> <ul> <li>Time Complexity involved is O(1)</li> </ul> <p>Peek Method: This method enables us to take a quick peek at the queue</p> <ul> <li>Time Complexity involed is O(1)</li> </ul> <p>Length Method: This method enables us to get the size of the queue.</p> <ul> <li>Time Complexity involed is O(1)</li> </ul>]]></content><author><name></name></author><category term="DSA"/><category term="python"/><summary type="html"><![CDATA[Here I plan to document the Stack and Queue Implementations in Python, these could be helpful to anyone preparing for the upcoming placement season.]]></summary></entry><entry><title type="html">Arguably the Most Handy Python Library- Sympy</title><link href="https://gouthamsaipydi.github.io/blog/2025/Sympy/" rel="alternate" type="text/html" title="Arguably the Most Handy Python Library- Sympy"/><published>2025-01-20T00:00:00+00:00</published><updated>2025-01-20T00:00:00+00:00</updated><id>https://gouthamsaipydi.github.io/blog/2025/Sympy</id><content type="html" xml:base="https://gouthamsaipydi.github.io/blog/2025/Sympy/"><![CDATA[<h2 id="sympy--the-library-hiding-under-the-hood">Sympy- The Library hiding under the hood</h2> <p>For the longest time, I had no clue this library was out there, and when I finally found it,It just blew my mind, I couldn’t stop thinking, “Why didn’t I know about this sooner?” But its just no use crying over spilled milk. Now let’s get straight to the good stuff and explore the magic of Sympy.</p> <p><a href="https://www.sympy.org/en/index.html">Sympy</a> stands for Symbolic Python. It was developed 17 years ago. Be it ODE’s or algebraic equations or solving the diophantine equations algebraically, look no further-Sympy has got you covered.</p> <h3 id="whats-so-special-about-this">What’s so special about this?</h3> <p>As most of you might be aware of the python library <a href="https://numpy.org/">Numpy</a>, which enables you to perform numerical calculations on your data. But Sympy is a bit more abstract in that sense, it enables you to perform symbolic computation(Using symbols)</p> <p>Simply put, we can perform all those nightmare inducing, pain staking and laborious mathematical operations like solving ODEs,substitution, differentiation, integration and even writing the equation in LaTex using sympy.</p> <p>Let me show you the beauty of it. It goes without saying that to use the library you need to first pip it :-}</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sympy</span> <span class="kn">import</span> <span class="o">*</span>
<span class="n">f</span><span class="p">,</span><span class="n">x</span><span class="o">=</span><span class="nf">symbols</span><span class="p">(</span><span class="sh">'</span><span class="s">f,x</span><span class="sh">'</span><span class="p">)</span>

<span class="c1">#Lets get creative about the function 
</span><span class="n">f</span><span class="o">=</span><span class="nf">exp</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">3</span><span class="p">)</span><span class="o">**</span><span class="mf">0.5</span>

<span class="c1">#Interested in the functional value of the above function at x=2? Fret not dear
</span><span class="n">f</span><span class="p">.</span><span class="nf">subs</span><span class="p">([(</span><span class="n">x</span><span class="p">,</span><span class="mi">2</span><span class="p">)])</span>
<span class="c1"># Output 54.5981500331442
</span>
<span class="c1"># Lets differentiate this Monster 
</span><span class="n">f</span><span class="p">.</span><span class="nf">diff</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="c1"># 1.5*x**2*exp(x**3)**0.5
</span></code></pre></div></div> <p>That’s just a short premise into how useful this library can be.</p> <p>Here is another snippet which performs the following daunting mathematical operation easily</p> \[\int_0^{3\pi}x^{12}*sin(33x)\hspace{1mm}dx\] <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="o">=</span><span class="nf">symbols</span><span class="p">(</span><span class="sh">'</span><span class="s">f</span><span class="sh">'</span><span class="p">,</span><span class="n">cls</span><span class="o">=</span><span class="n">Function</span><span class="p">)</span>
<span class="n">x</span><span class="o">=</span><span class="nf">symbols</span><span class="p">(</span><span class="sh">'</span><span class="s">x</span><span class="sh">'</span><span class="p">)</span>
<span class="c1">#defining the function
</span><span class="n">f</span><span class="o">=</span><span class="n">x</span><span class="o">**</span><span class="mi">12</span><span class="o">*</span><span class="nf">sin</span><span class="p">(</span><span class="mi">33</span><span class="o">*</span><span class="n">x</span><span class="p">)</span>

<span class="n">f</span><span class="p">.</span><span class="nf">integrate</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="c1">#Output: -x**12*cos(33*x)/33 + 4*x**11*sin(33*x)/363 + 4*x**10*cos(33*x)/1089 - 40*x**9*sin(33*x)/35937 - 40*x**8*cos(33*x)/131769 + 320*x**7*sin(33*x)/4348377 + 2240*x**6*cos(33*x)/143496441 - 4480*x**5*sin(33*x)/1578460851 - 22400*x**4*cos(33*x)/52089208083 + 89600*x**3*sin(33*x)/1718943866739 + 89600*x**2*cos(33*x)/18908382534129 - 179200*x*sin(33*x)/623976623626257 - 179200*cos(33*x)/20591228579666481 
</span>
<span class="n">integral</span><span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="nf">integrate</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="nf">subs</span><span class="p">([(</span><span class="n">x</span><span class="p">,</span><span class="mi">3</span><span class="o">*</span><span class="n">pi</span><span class="p">)])</span><span class="o">-</span><span class="n">f</span><span class="p">.</span><span class="nf">integrate</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="nf">subs</span><span class="p">([(</span><span class="n">x</span><span class="p">,</span><span class="mi">0</span><span class="p">)]))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">integral</span><span class="p">)</span>
<span class="c1"># Output: 14864390294.783045
</span></code></pre></div></div> <p>Another cool method which i found to be very useful was print_latex, I’ll use that method trying to solve the following ODE.</p> \[12*y^{\prime \prime }(x)+3y^{\prime}(x)-6*y(x)=0\] <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y</span><span class="o">=</span><span class="nf">symbols</span><span class="p">(</span><span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">,</span><span class="n">cls</span><span class="o">=</span><span class="n">Function</span><span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="nf">dsolve</span><span class="p">(</span><span class="mi">12</span><span class="o">*</span><span class="nc">Derivative</span><span class="p">(</span><span class="nf">y</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="nc">Derivative</span><span class="p">(</span><span class="nf">y</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="n">x</span><span class="p">)</span><span class="o">-</span><span class="mi">6</span><span class="o">*</span><span class="nf">y</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="nf">y</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="c1"># Output:
# Eq(y(x), C1*exp(x*(-1 + sqrt(33))/8) + C2*exp(-x*(1 + sqrt(33))/8))
</span><span class="nf">checkodesol</span><span class="p">(</span><span class="mi">12</span><span class="o">*</span><span class="nc">Derivative</span><span class="p">(</span><span class="nf">y</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="nc">Derivative</span><span class="p">(</span><span class="nf">y</span><span class="p">(</span><span class="n">x</span><span class="p">),</span><span class="n">x</span><span class="p">)</span><span class="o">-</span><span class="mi">6</span><span class="o">*</span><span class="nf">y</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">result</span><span class="p">)</span>
<span class="c1"># Output: (True, 0)
</span><span class="nf">print_latex</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
<span class="c1"># Output: y{\left(x \right)} = C_{1} e^{\frac{x \left(-1 + \sqrt{33}\right)}{8}} + C_{2} e^{- \frac{x \left(1 + \sqrt{33}\right)}{8}}
</span></code></pre></div></div> <p>Wondering what the solution, Lo and Behold here it is, \(y{\left(x \right)} = C_{1} e^{\frac{x \left(-1 + \sqrt{33}\right)}{8}} + C_{2} e^{- \frac{x \left(1 + \sqrt{33}\right)}{8}}\)</p> <p>Well here i have only mentioned a few instances where sympy can come in handy. Gloss over the <a href="https://docs.sympy.org/latest/index.html">Documentation</a>, you will find many more interesting applications.</p> <p>Happy Learning!</p>]]></content><author><name></name></author><category term="python"/><summary type="html"><![CDATA[Sympy- The Library hiding under the hood]]></summary></entry><entry><title type="html">What If?</title><link href="https://gouthamsaipydi.github.io/blog/2024/First_Blog_Post/" rel="alternate" type="text/html" title="What If?"/><published>2024-12-01T00:00:00+00:00</published><updated>2024-12-01T00:00:00+00:00</updated><id>https://gouthamsaipydi.github.io/blog/2024/First_Blog_Post</id><content type="html" xml:base="https://gouthamsaipydi.github.io/blog/2024/First_Blog_Post/"><![CDATA[<p>Welcome to my first blog post!</p> <p>I have always wondered how would it feel to able to express yourself without a care in the world. It’s this overarching curiosity that’s driving me to pen this down. I’m planning of documenting my views on the books and articles that i go through.</p> <p>Let me be clear with something, 1) English is not my first language, and 2) I am an amateur writer, don’t expect Shakespearean from me.</p> <p>Brace yourselves to experience an opionated mind!</p> <p>Prost</p>]]></content><author><name></name></author><category term="Introduction"/><summary type="html"><![CDATA[Hello World]]></summary></entry><entry><title type="html">Homo Sapien- A Two legged menace</title><link href="https://gouthamsaipydi.github.io/blog/2024/Sapiens/" rel="alternate" type="text/html" title="Homo Sapien- A Two legged menace"/><published>2024-12-01T00:00:00+00:00</published><updated>2024-12-01T00:00:00+00:00</updated><id>https://gouthamsaipydi.github.io/blog/2024/Sapiens</id><content type="html" xml:base="https://gouthamsaipydi.github.io/blog/2024/Sapiens/"><![CDATA[<p>Recently i had the opportunity of getting to start Yuval Noah Harari’s classic Sapiens. It has been a great read so far, I am planning to update this post as and when i complete a section of the book. In this post i plan to dig deep into the book with an existential take of course.</p> <h2 id="rise-to-the-top">Rise to the Top</h2> <p>Our rise from being a bunch of unimportant weaklings on the planet to the top of the food chain has been quite a journey, Even the best of the modern day UFC fighters would get their skulls beaten to pulp by a wild chimpanzee in a matter of seconds. The story of such a frail being’s rise to the throne is the book Sapiens.</p> <p>The Author goes in detail about what could be the reasons of our ascendency and the downfall of other species of the Homo genus. Let me digress a bit and explain you about our long lost cousins, We had company up until circa 10,000 BCE when the last neaderthal passed away, Leaving us orphaned forever. The Planet Earth was home to around 7 (as of now) species of Homo genus, there were Homo erectus in the Indonesian archipelagos, Homo Neandethal in the Europa and our kind in jungles of Eastern Africa. What favoured us and helped us to beat the ever changing climatic conditions and reign supreme is quite debated among the scholars.</p> <p>Lets evalute the obvious reasons that come to us,</p> <ul> <li>The Size of the Brain: Yes it is definitely larger when compared with other species, but recent archialogical evidences show that the Neaderthal had much larger craniums, hence larger grey matter.</li> <li></li> </ul> <h2 id="part-time-gossip-mongers">Part-time Gossip Mongers</h2> <p>## We are so clouded by the Imagined Reality, that we at times seem to forget how small and insignificant we are in this cosmos.</p>]]></content><author><name></name></author><category term="Book"/><summary type="html"><![CDATA[Recently i had the opportunity of getting to start Yuval Noah Harari’s classic Sapiens. It has been a great read so far, I am planning to update this post as and when i complete a section of the book. In this post i plan to dig deep into the book with an existential take of course.]]></summary></entry></feed>